{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3a0232e8-ddff-4b8e-ba2c-3316614b15b4",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-25 11:15:13.543 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\ahmadd\\AppData\\Local\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-08-25 11:15:13.754 No runtime found, using MemoryCacheStorageManager\n",
      "2025-08-25 11:15:13.759 No runtime found, using MemoryCacheStorageManager\n",
      "2025-08-25 11:15:13.762 No runtime found, using MemoryCacheStorageManager\n",
      "2025-08-25 11:15:13.772 No runtime found, using MemoryCacheStorageManager\n",
      "2025-08-25 11:15:13.779 Session state does not function when running a script without `streamlit run`\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DeltaGenerator()"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import os\n",
    "from openai import OpenAI\n",
    "from dotenv import load_dotenv\n",
    "import altair as alt\n",
    "from datetime import datetime\n",
    "import re\n",
    "\n",
    "st.set_page_config(\n",
    "    page_title=\"AI Budget Assistant\", \n",
    "    layout=\"wide\",\n",
    "    initial_sidebar_state=\"expanded\"\n",
    ")\n",
    "\n",
    "# Enhanced CSS styling\n",
    "st.markdown(\"\"\"\n",
    "<style>\n",
    "    /* Dark theme and professional styling */\n",
    "    .main > div {\n",
    "        padding-top: 1rem;\n",
    "    }\n",
    "    \n",
    "    /* Header styling */\n",
    "    .main-header {\n",
    "        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n",
    "        padding: 2rem;\n",
    "        border-radius: 15px;\n",
    "        margin-bottom: 2rem;\n",
    "        text-align: center;\n",
    "        color: white;\n",
    "        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n",
    "    }\n",
    "    \n",
    "    /* Sidebar styling */\n",
    "    .css-1d391kg {\n",
    "        background-color: #1e293b;\n",
    "    }\n",
    "    \n",
    "    /* Filter section headers */\n",
    "    .filter-header {\n",
    "        background: linear-gradient(90deg, #3b82f6, #1d4ed8);\n",
    "        color: white;\n",
    "        padding: 0.75rem;\n",
    "        border-radius: 8px;\n",
    "        margin: 1rem 0 0.5rem 0;\n",
    "        font-weight: bold;\n",
    "        text-align: center;\n",
    "        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n",
    "    }\n",
    "    \n",
    "    /* Metric cards */\n",
    "    .metric-container {\n",
    "        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);\n",
    "        padding: 1.5rem;\n",
    "        border-radius: 12px;\n",
    "        border-left: 4px solid #3b82f6;\n",
    "        margin: 0.5rem 0;\n",
    "        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n",
    "    }\n",
    "    \n",
    "    /* Table styling */\n",
    "    .dataframe {\n",
    "        border-radius: 8px;\n",
    "        border: 1px solid #e2e8f0;\n",
    "        overflow: hidden;\n",
    "    }\n",
    "    \n",
    "    /* Button styling */\n",
    "    .stButton > button {\n",
    "        background: linear-gradient(45deg, #3b82f6, #1d4ed8);\n",
    "        color: white;\n",
    "        border: none;\n",
    "        border-radius: 8px;\n",
    "        padding: 0.5rem 1rem;\n",
    "        font-weight: bold;\n",
    "        transition: all 0.3s ease;\n",
    "        box-shadow: 0 2px 4px rgba(59, 130, 246, 0.3);\n",
    "    }\n",
    "    \n",
    "    .stButton > button:hover {\n",
    "        transform: translateY(-2px);\n",
    "        box-shadow: 0 4px 8px rgba(59, 130, 246, 0.4);\n",
    "    }\n",
    "    \n",
    "    /* Tab styling */\n",
    "    .stTabs [data-baseweb=\"tab-list\"] {\n",
    "        gap: 8px;\n",
    "    }\n",
    "    \n",
    "    .stTabs [data-baseweb=\"tab\"] {\n",
    "        background-color: #f1f5f9;\n",
    "        border-radius: 8px;\n",
    "        color: #475569;\n",
    "        font-weight: bold;\n",
    "    }\n",
    "    \n",
    "    .stTabs [aria-selected=\"true\"] {\n",
    "        background: linear-gradient(45deg, #3b82f6, #1d4ed8);\n",
    "        color: white;\n",
    "    }\n",
    "    \n",
    "    /* Warning and info boxes */\n",
    "    .stAlert {\n",
    "        border-radius: 8px;\n",
    "        border: none;\n",
    "        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n",
    "    }\n",
    "    \n",
    "    /* Success message styling */\n",
    "    .stSuccess {\n",
    "        background: linear-gradient(135deg, #10b981, #059669);\n",
    "        color: white;\n",
    "        border-radius: 8px;\n",
    "    }\n",
    "    \n",
    "    /* Input styling */\n",
    "    .stTextInput > div > div > input {\n",
    "        border-radius: 8px;\n",
    "        border: 2px solid #e2e8f0;\n",
    "    }\n",
    "    \n",
    "    .stTextInput > div > div > input:focus {\n",
    "        border-color: #3b82f6;\n",
    "        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n",
    "    }\n",
    "    \n",
    "    /* Selectbox styling */\n",
    "    .stSelectbox > div > div {\n",
    "        border-radius: 8px;\n",
    "    }\n",
    "    \n",
    "    /* Caption styling */\n",
    "    .caption-style {\n",
    "        background: linear-gradient(90deg, #f8fafc, #e2e8f0);\n",
    "        padding: 0.75rem;\n",
    "        border-radius: 8px;\n",
    "        border-left: 3px solid #6366f1;\n",
    "        font-style: italic;\n",
    "        color: #475569;\n",
    "        margin: 1rem 0;\n",
    "    }\n",
    "    \n",
    "    /* Debug box styling */\n",
    "    .debug-box {\n",
    "        background: #fef3c7;\n",
    "        border: 1px solid #f59e0b;\n",
    "        padding: 1rem;\n",
    "        border-radius: 8px;\n",
    "        margin: 1rem 0;\n",
    "        font-family: monospace;\n",
    "        font-size: 0.9rem;\n",
    "    }\n",
    "</style>\n",
    "\"\"\", unsafe_allow_html=True)\n",
    "\n",
    "# === OpenAI client ===\n",
    "load_dotenv()\n",
    "api_key = os.getenv(\"OPENAI_API_KEY\", \"\")\n",
    "client = OpenAI(api_key=api_key) if api_key else None\n",
    "if not api_key:\n",
    "    st.markdown(\"\"\"\n",
    "    <div style=\"background: linear-gradient(45deg, #f59e0b, #d97706); color: white; padding: 1rem; border-radius: 8px; margin: 1rem 0;\">\n",
    "        ‚ö†Ô∏è <strong>OpenAI API Key Required:</strong> Add OPENAI_API_KEY to .env or Streamlit secrets for GPT features.\n",
    "    </div>\n",
    "    \"\"\", unsafe_allow_html=True)\n",
    "\n",
    "# === Loaders ===\n",
    "@st.cache_data\n",
    "def load_actuals(path: str):\n",
    "    df = pd.read_csv(path)\n",
    "    df.columns = [c.strip().replace(\" \", \"_\") for c in df.columns]\n",
    "    # fix common typo\n",
    "    if \"Budget_Allcated\" in df.columns:\n",
    "        df = df.rename(columns={\"Budget_Allcated\": \"Budget_Allocated\"})\n",
    "    req = [\"Month\", \"Department\", \"Category\", \"Budget_Allocated\", \"Actual_Spent\", \"Variance\"]\n",
    "    missing = [c for c in req if c not in df.columns]\n",
    "    if missing:\n",
    "        raise ValueError(f\"Actuals missing columns: {missing}\")\n",
    "    df[\"Month\"] = pd.to_datetime(df[\"Month\"], format=\"%Y-%m\", errors=\"coerce\")\n",
    "    if df[\"Month\"].isna().any():\n",
    "        df[\"Month\"] = pd.to_datetime(df[\"Month\"], errors=\"coerce\")\n",
    "    for c in [\"Budget_Allocated\", \"Actual_Spent\", \"Variance\"]:\n",
    "        df[c] = pd.to_numeric(df[c], errors=\"coerce\")\n",
    "    df = df.dropna(subset=[\"Month\", \"Budget_Allocated\", \"Actual_Spent\"])\n",
    "    return df.sort_values(\"Month\")\n",
    "\n",
    "@st.cache_data\n",
    "def load_forecast(path: str):\n",
    "    if not os.path.exists(path):\n",
    "        return None\n",
    "    f = pd.read_csv(path)\n",
    "    f.columns = [c.strip().replace(\" \", \"_\") for c in f.columns]\n",
    "    if \"Predicted_Spent\" not in f.columns:\n",
    "        for altcol in [\"Forecast\", \"Forecasted\", \"yhat\", \"y_pred\"]:\n",
    "            if altcol in f.columns:\n",
    "                f = f.rename(columns={altcol: \"Predicted_Spent\"})\n",
    "                break\n",
    "    req = [\"Month\", \"Department\", \"Category\", \"Predicted_Spent\"]\n",
    "    missing = [c for c in req if c not in f.columns]\n",
    "    if missing:\n",
    "        raise ValueError(f\"Forecast missing columns: {missing}\")\n",
    "    f[\"Month\"] = pd.to_datetime(f[\"Month\"], errors=\"coerce\")\n",
    "    f[\"Predicted_Spent\"] = pd.to_numeric(f[\"Predicted_Spent\"], errors=\"coerce\")\n",
    "    f = f.dropna(subset=[\"Month\", \"Predicted_Spent\"])\n",
    "    return f.sort_values(\"Month\")\n",
    "\n",
    "ACTUALS_PATH = \"rich_dummy_budget_data.csv\"\n",
    "FORECAST_PATH = \"forecasted_budget_2025.csv\"\n",
    "\n",
    "df = load_actuals(ACTUALS_PATH)\n",
    "forecast = load_forecast(FORECAST_PATH)\n",
    "\n",
    "# Add calculated fields for enhanced filtering\n",
    "df[\"Variance_Percent\"] = ((df[\"Actual_Spent\"] - df[\"Budget_Allocated\"]) / df[\"Budget_Allocated\"] * 100).round(2)\n",
    "df[\"Year\"] = df[\"Month\"].dt.year\n",
    "df[\"Quarter\"] = df[\"Month\"].dt.quarter\n",
    "\n",
    "# === Enhanced Sidebar Filters ===\n",
    "with st.sidebar:\n",
    "    st.markdown('<div class=\"filter-header\">üéõÔ∏è Control Panel</div>', unsafe_allow_html=True)\n",
    "    \n",
    "    # Dataset Overview\n",
    "    st.markdown(\"**üìä Dataset Overview**\")\n",
    "    col1, col2 = st.columns(2)\n",
    "    with col1:\n",
    "        st.metric(\"üìã Records\", f\"{len(df):,}\", help=\"Total number of budget records\")\n",
    "        st.metric(\"üè¢ Departments\", len(df[\"Department\"].unique()))\n",
    "    with col2:\n",
    "        st.metric(\"üìÅ Categories\", len(df[\"Category\"].unique()))\n",
    "        st.metric(\"üìÖ Time Span\", f\"{df['Year'].min()}-{df['Year'].max()}\")\n",
    "    \n",
    "    st.markdown(\"---\")\n",
    "    \n",
    "    # Primary Filters\n",
    "    st.markdown('<div class=\"filter-header\">üîç Primary Filters</div>', unsafe_allow_html=True)\n",
    "    \n",
    "    dept_sel = st.multiselect(\n",
    "        \"üè¢ Department(s)\", \n",
    "        sorted(df[\"Department\"].unique()), \n",
    "        default=sorted(df[\"Department\"].unique()),\n",
    "        help=\"Select one or more departments to analyze\"\n",
    "    )\n",
    "    \n",
    "    cat_sel = st.multiselect(\n",
    "        \"üìÅ Category(ies)\", \n",
    "        sorted(df[\"Category\"].unique()), \n",
    "        default=sorted(df[\"Category\"].unique()),\n",
    "        help=\"Choose expense categories to include\"\n",
    "    )\n",
    "    \n",
    "    # Enhanced Date Filter\n",
    "    min_month_py = pd.to_datetime(df[\"Month\"].min()).to_pydatetime()\n",
    "    max_month_py = pd.to_datetime(df[\"Month\"].max()).to_pydatetime()\n",
    "    date_range = st.slider(\n",
    "        \"üìÖ Actuals Month Range\",\n",
    "        value=(min_month_py, max_month_py),\n",
    "        min_value=min_month_py,\n",
    "        max_value=max_month_py,\n",
    "        format=\"YYYY-MM\",\n",
    "        help=\"Select the time period for analysis\"\n",
    "    )\n",
    "    \n",
    "    # Advanced Filters\n",
    "    st.markdown('<div class=\"filter-header\">‚öôÔ∏è Advanced Filters</div>', unsafe_allow_html=True)\n",
    "    \n",
    "    # Year Filter\n",
    "    year_options = sorted(df[\"Year\"].unique())\n",
    "    selected_years = st.multiselect(\n",
    "        \"üìÖ Filter by Year(s)\",\n",
    "        year_options,\n",
    "        default=year_options,\n",
    "        help=\"Focus on specific years\"\n",
    "    )\n",
    "    \n",
    "    # Variance Filter\n",
    "    variance_range = st.slider(\n",
    "        \"üìä Variance % Range\",\n",
    "        min_value=float(df[\"Variance_Percent\"].min()),\n",
    "        max_value=float(df[\"Variance_Percent\"].max()),\n",
    "        value=(float(df[\"Variance_Percent\"].min()), float(df[\"Variance_Percent\"].max())),\n",
    "        step=1.0,\n",
    "        help=\"Filter by budget variance percentage\"\n",
    "    )\n",
    "    \n",
    "    # Amount Filter\n",
    "    amount_range = st.slider(\n",
    "        \"üí∞ Spending Range ($)\",\n",
    "        min_value=float(df[\"Actual_Spent\"].min()),\n",
    "        max_value=float(df[\"Actual_Spent\"].max()),\n",
    "        value=(float(df[\"Actual_Spent\"].min()), float(df[\"Actual_Spent\"].max())),\n",
    "        step=1000.0,\n",
    "        format=\"$%.0f\",\n",
    "        help=\"Filter by actual spending amount\"\n",
    "    )\n",
    "    \n",
    "    # Budget Performance Filter\n",
    "    budget_performance = st.selectbox(\n",
    "        \"üéØ Budget Performance\",\n",
    "        [\"All\", \"Over Budget (>0%)\", \"Under Budget (<0%)\", \"On Target (¬±5%)\", \"Significant Variance (>¬±10%)\"],\n",
    "        help=\"Filter by budget adherence\"\n",
    "    )\n",
    "    \n",
    "    # Chart Type Selection\n",
    "    st.markdown('<div class=\"filter-header\">üìä Chart Options</div>', unsafe_allow_html=True)\n",
    "    chart_type = st.selectbox(\n",
    "        \"üìä Chart Style\",\n",
    "        [\"Stacked Bars\", \"Grouped Bars\", \"Pie Charts\"],\n",
    "        help=\"Choose visualization style for department/category views\"\n",
    "    )\n",
    "    \n",
    "    # Forecast Options\n",
    "    st.markdown('<div class=\"filter-header\">üîÆ Forecast Settings</div>', unsafe_allow_html=True)\n",
    "    show_forecast = st.checkbox(\n",
    "        \"üìà Show 2025 Forecast\", \n",
    "        value=(forecast is not None),\n",
    "        help=\"Display ML-generated predictions\",\n",
    "        disabled=(forecast is None)\n",
    "    )\n",
    "    \n",
    "    if forecast is None:\n",
    "        st.info(\"üí° No forecast file found. Place 'forecasted_budget_2025.csv' in the directory to enable forecasting.\")\n",
    "\n",
    "# === Apply Enhanced Filters ===\n",
    "mask = (\n",
    "    df[\"Department\"].isin(dept_sel)\n",
    "    & df[\"Category\"].isin(cat_sel)\n",
    "    & (df[\"Month\"] >= pd.to_datetime(date_range[0]))\n",
    "    & (df[\"Month\"] <= pd.to_datetime(date_range[1]))\n",
    "    & df[\"Year\"].isin(selected_years)\n",
    "    & (df[\"Variance_Percent\"] >= variance_range[0])\n",
    "    & (df[\"Variance_Percent\"] <= variance_range[1])\n",
    "    & (df[\"Actual_Spent\"] >= amount_range[0])\n",
    "    & (df[\"Actual_Spent\"] <= amount_range[1])\n",
    ")\n",
    "\n",
    "# Apply budget performance filter\n",
    "if budget_performance == \"Over Budget (>0%)\":\n",
    "    mask = mask & (df[\"Variance_Percent\"] > 0)\n",
    "elif budget_performance == \"Under Budget (<0%)\":\n",
    "    mask = mask & (df[\"Variance_Percent\"] < 0)\n",
    "elif budget_performance == \"On Target (¬±5%)\":\n",
    "    mask = mask & (df[\"Variance_Percent\"].between(-5, 5))\n",
    "elif budget_performance == \"Significant Variance (>¬±10%)\":\n",
    "    mask = mask & ((df[\"Variance_Percent\"] > 10) | (df[\"Variance_Percent\"] < -10))\n",
    "\n",
    "df_f = df.loc[mask].copy()\n",
    "\n",
    "if forecast is not None:\n",
    "    f_mask = forecast[\"Department\"].isin(dept_sel) & forecast[\"Category\"].isin(cat_sel)\n",
    "    f_f = forecast.loc[f_mask].copy()\n",
    "else:\n",
    "    f_f = None\n",
    "\n",
    "# === Enhanced Header & KPIs ===\n",
    "st.markdown(\"\"\"\n",
    "<div class=\"main-header\">\n",
    "    <h1>üíº AI Budget Forecast & Analysis</h1>\n",
    "    <p style=\"font-size: 1.1rem; margin: 0.5rem 0;\">Advanced Financial Intelligence Platform</p>\n",
    "    <p style=\"font-size: 0.9rem; opacity: 0.9;\">Actuals: 2021‚Äìpresent | Forecast: 2025 (from ML model)</p>\n",
    "</div>\n",
    "\"\"\", unsafe_allow_html=True)\n",
    "\n",
    "# Debug information for troubleshooting\n",
    "if len(df_f) == 0:\n",
    "    st.markdown(\"\"\"\n",
    "    <div class=\"debug-box\">\n",
    "        <strong>üîç Debug Information:</strong><br>\n",
    "        ‚Ä¢ Total records in dataset: {}<br>\n",
    "        ‚Ä¢ Departments selected: {}<br>\n",
    "        ‚Ä¢ Categories selected: {}<br>\n",
    "        ‚Ä¢ Date range: {} to {}<br>\n",
    "        ‚Ä¢ Selected years: {}<br>\n",
    "        ‚Ä¢ Available departments: {}<br>\n",
    "        ‚Ä¢ Available categories: {}\n",
    "    </div>\n",
    "    \"\"\".format(\n",
    "        len(df),\n",
    "        len(dept_sel),\n",
    "        len(cat_sel), \n",
    "        date_range[0].strftime(\"%Y-%m\"),\n",
    "        date_range[1].strftime(\"%Y-%m\"),\n",
    "        selected_years,\n",
    "        list(sorted(df[\"Department\"].unique())),\n",
    "        list(sorted(df[\"Category\"].unique()))\n",
    "    ), unsafe_allow_html=True)\n",
    "\n",
    "# Enhanced KPI Display\n",
    "if len(df_f) == 0:\n",
    "    st.markdown(\"\"\"\n",
    "    <div style=\"background: linear-gradient(45deg, #f59e0b, #d97706); color: white; padding: 2rem; border-radius: 12px; text-align: center;\">\n",
    "        <h3>‚ö†Ô∏è No Data Found</h3>\n",
    "        <p>No records match your current filter criteria. Please adjust the filters to see results.</p>\n",
    "    </div>\n",
    "    \"\"\", unsafe_allow_html=True)\n",
    "else:\n",
    "    col1, col2, col3, col4 = st.columns(4)\n",
    "    total_budget = df_f[\"Budget_Allocated\"].sum()\n",
    "    total_actual = df_f[\"Actual_Spent\"].sum()\n",
    "    total_var = df_f[\"Variance\"].sum()\n",
    "    var_pct = (total_var / total_budget * 100) if total_budget else 0.0\n",
    "    \n",
    "    with col1:\n",
    "        delta_color = \"normal\" if abs(var_pct) < 5 else \"inverse\"\n",
    "        st.metric(\n",
    "            \"üí∞ Total Budget\",\n",
    "            f\"${total_budget:,.0f}\",\n",
    "            delta=f\"{len(df_f)} records\",\n",
    "            help=\"Total allocated budget for filtered data\"\n",
    "        )\n",
    "    \n",
    "    with col2:\n",
    "        st.metric(\n",
    "            \"üí≥ Actual Spent\",\n",
    "            f\"${total_actual:,.0f}\",\n",
    "            delta=f\"vs Budget: {var_pct:+.1f}%\",\n",
    "            delta_color=delta_color,\n",
    "            help=\"Total actual spending with variance indicator\"\n",
    "        )\n",
    "    \n",
    "    with col3:\n",
    "        variance_color = \"inverse\" if total_var > 0 else \"normal\"\n",
    "        st.metric(\n",
    "            \"üìä Net Variance\",\n",
    "            f\"${total_var:+,.0f}\",\n",
    "            delta=f\"{var_pct:+.2f}%\",\n",
    "            delta_color=variance_color,\n",
    "            help=\"Total variance: Actual - Budget\"\n",
    "        )\n",
    "    \n",
    "    with col4:\n",
    "        # Budget efficiency score\n",
    "        efficiency = 100 - abs(var_pct)\n",
    "        efficiency_color = \"normal\" if efficiency > 90 else \"inverse\"\n",
    "        st.metric(\n",
    "            \"üéØ Budget Efficiency\",\n",
    "            f\"{efficiency:.1f}%\",\n",
    "            delta=\"Excellent\" if efficiency > 95 else \"Good\" if efficiency > 85 else \"Needs Review\",\n",
    "            delta_color=efficiency_color,\n",
    "            help=\"Budget adherence score (100% = perfect)\"\n",
    "        )\n",
    "\n",
    "    # Quick Stats Row\n",
    "    col1, col2, col3, col4 = st.columns(4)\n",
    "    \n",
    "    over_budget = len(df_f[df_f[\"Variance_Percent\"] > 0])\n",
    "    under_budget = len(df_f[df_f[\"Variance_Percent\"] < 0])\n",
    "    on_target = len(df_f[df_f[\"Variance_Percent\"].between(-2, 2)])\n",
    "    avg_variance = df_f[\"Variance_Percent\"].mean()\n",
    "    \n",
    "    with col1:\n",
    "        st.metric(\"üî¥ Over Budget\", f\"{over_budget}\", f\"{over_budget/len(df_f)*100:.1f}% of items\")\n",
    "    with col2:\n",
    "        st.metric(\"üü¢ Under Budget\", f\"{under_budget}\", f\"{under_budget/len(df_f)*100:.1f}% of items\")\n",
    "    with col3:\n",
    "        st.metric(\"üéØ On Target (¬±2%)\", f\"{on_target}\", f\"{on_target/len(df_f)*100:.1f}% of items\")\n",
    "    with col4:\n",
    "        st.metric(\"üìà Avg Variance\", f\"{avg_variance:+.1f}%\", \"Across all filtered items\")\n",
    "\n",
    "    # === Enhanced Tables ===\n",
    "    st.markdown(\"---\")\n",
    "    st.subheader(\"üìä Detailed Analysis\")\n",
    "    \n",
    "    # Filter summary\n",
    "    col1, col2, col3 = st.columns(3)\n",
    "    with col1:\n",
    "        st.info(f\"üìã **{len(df_f):,}** records displayed\")\n",
    "    with col2:\n",
    "        st.info(f\"üè¢ **{len(df_f['Department'].unique())}** departments active\")\n",
    "    with col3:\n",
    "        st.info(f\"üìÅ **{len(df_f['Category'].unique())}** categories shown\")\n",
    "\n",
    "    # Enhanced table with better formatting\n",
    "    display_df = df_f.copy()\n",
    "    display_df[\"Month_Display\"] = display_df[\"Month\"].dt.strftime(\"%Y-%m\")\n",
    "    display_df[\"Budget_Display\"] = display_df[\"Budget_Allocated\"].apply(lambda x: f\"${x:,.0f}\")\n",
    "    display_df[\"Actual_Display\"] = display_df[\"Actual_Spent\"].apply(lambda x: f\"${x:,.0f}\")\n",
    "    display_df[\"Variance_Display\"] = display_df[\"Variance\"].apply(lambda x: f\"${x:+,.0f}\")\n",
    "    display_df[\"Variance_Pct_Display\"] = display_df[\"Variance_Percent\"].apply(lambda x: f\"{x:+.1f}%\")\n",
    "    \n",
    "    st.dataframe(\n",
    "        display_df[[\"Month_Display\", \"Department\", \"Category\", \"Budget_Display\", \"Actual_Display\", \"Variance_Display\", \"Variance_Pct_Display\"]].rename(columns={\n",
    "            \"Month_Display\": \"Month\",\n",
    "            \"Budget_Display\": \"Budget\",\n",
    "            \"Actual_Display\": \"Actual\",\n",
    "            \"Variance_Display\": \"Variance ($)\",\n",
    "            \"Variance_Pct_Display\": \"Variance (%)\"\n",
    "        }),\n",
    "        use_container_width=True,\n",
    "        height=400\n",
    "    )\n",
    "\n",
    "    if show_forecast and f_f is not None:\n",
    "        st.subheader(\"üîÆ 2025 Forecast Data\")\n",
    "        \n",
    "        # Forecast summary\n",
    "        forecast_total = f_f[\"Predicted_Spent\"].sum()\n",
    "        forecast_monthly_avg = forecast_total / 12 if len(f_f) > 0 else 0\n",
    "        \n",
    "        col1, col2 = st.columns(2)\n",
    "        with col1:\n",
    "            st.metric(\"üìà Total 2025 Forecast\", f\"${forecast_total:,.0f}\")\n",
    "        with col2:\n",
    "            st.metric(\"üìÖ Monthly Average\", f\"${forecast_monthly_avg:,.0f}\")\n",
    "        \n",
    "        # Format forecast table\n",
    "        f_display = f_f.copy()\n",
    "        f_display[\"Month_Display\"] = f_display[\"Month\"].dt.strftime(\"%Y-%m\")\n",
    "        f_display[\"Predicted_Display\"] = f_display[\"Predicted_Spent\"].apply(lambda x: f\"${x:,.0f}\")\n",
    "        \n",
    "        st.dataframe(\n",
    "            f_display[[\"Month_Display\", \"Department\", \"Category\", \"Predicted_Display\"]].rename(columns={\n",
    "                \"Month_Display\": \"Month\",\n",
    "                \"Predicted_Display\": \"Predicted Spending\"\n",
    "            }),\n",
    "            use_container_width=True,\n",
    "            height=300\n",
    "        )\n",
    "\n",
    "    # === Enhanced Charts with Multiple Visualization Options ===\n",
    "    st.markdown(\"---\")\n",
    "    st.subheader(\"üìà Visual Analytics\")\n",
    "    tab1, tab2, tab3 = st.tabs([\"üìä Monthly Trends\", \"üè¢ By Department\", \"üìÅ By Category\"])\n",
    "\n",
    "    with tab1:\n",
    "        monthly_actuals = df_f.groupby(\"Month\", as_index=False)[[\"Actual_Spent\", \"Budget_Allocated\"]].sum()\n",
    "        \n",
    "        # Enhanced color scheme\n",
    "        actual_chart = (\n",
    "            alt.Chart(monthly_actuals)\n",
    "            .transform_fold([\"Actual_Spent\", \"Budget_Allocated\"], as_=[\"Type\", \"Amount\"])\n",
    "            .mark_line(point=True, strokeWidth=3)\n",
    "            .encode(\n",
    "                x=alt.X(\"Month:T\", title=\"Month\", axis=alt.Axis(format=\"%b %Y\")),\n",
    "                y=alt.Y(\"Amount:Q\", title=\"Amount ($)\", axis=alt.Axis(format=\"$,.0f\")),\n",
    "                color=alt.Color(\n",
    "                    \"Type:N\", \n",
    "                    scale=alt.Scale(domain=[\"Actual_Spent\", \"Budget_Allocated\"], \n",
    "                                  range=[\"#ef4444\", \"#3b82f6\"]),\n",
    "                    legend=alt.Legend(title=\"Type\", orient=\"top\")\n",
    "                ),\n",
    "                tooltip=[\n",
    "                    alt.Tooltip(\"Month:T\", format=\"%B %Y\"),\n",
    "                    \"Type:N\", \n",
    "                    alt.Tooltip(\"Amount:Q\", format=\"$,.0f\")\n",
    "                ],\n",
    "            )\n",
    "            .properties(height=400)\n",
    "        )\n",
    "        \n",
    "        if show_forecast and f_f is not None:\n",
    "            monthly_fc = f_f.groupby(\"Month\", as_index=False)[\"Predicted_Spent\"].sum()\n",
    "            fc_chart = (\n",
    "                alt.Chart(monthly_fc)\n",
    "                .mark_line(point=True, strokeWidth=3, strokeDash=[5, 5])\n",
    "                .encode(\n",
    "                    x=\"Month:T\",\n",
    "                    y=alt.Y(\"Predicted_Spent:Q\", title=\"Predicted Spent ($)\"),\n",
    "                    color=alt.value(\"#10b981\"),\n",
    "                    tooltip=[\n",
    "                        alt.Tooltip(\"Month:T\", format=\"%B %Y\"),\n",
    "                        alt.Tooltip(\"Predicted_Spent:Q\", format=\"$,.0f\", title=\"Forecast\")\n",
    "                    ],\n",
    "                )\n",
    "            )\n",
    "            combined_chart = alt.layer(actual_chart, fc_chart).resolve_scale(y=\"independent\").interactive()\n",
    "            st.altair_chart(combined_chart, use_container_width=True)\n",
    "            \n",
    "            # Add legend for forecast\n",
    "            st.markdown(\"\"\"\n",
    "            <div style=\"background: #f8fafc; padding: 1rem; border-radius: 8px; border-left: 3px solid #10b981;\">\n",
    "                <strong>Chart Legend:</strong> \n",
    "                <span style=\"color: #3b82f6;\">‚ñ† Budget Allocated</span> | \n",
    "                <span style=\"color: #ef4444;\">‚ñ† Actual Spent</span> | \n",
    "                <span style=\"color: #10b981;\">‚ñ† 2025 Forecast (dashed)</span>\n",
    "            </div>\n",
    "            \"\"\", unsafe_allow_html=True)\n",
    "        else:\n",
    "            st.altair_chart(actual_chart.interactive(), use_container_width=True)\n",
    "\n",
    "    with tab2:\n",
    "        # Debug info for department tab\n",
    "        by_dept = df_f.groupby(\"Department\", as_index=False)[[\"Actual_Spent\", \"Budget_Allocated\"]].sum()\n",
    "        \n",
    "        if by_dept.empty:\n",
    "            st.markdown(\"\"\"\n",
    "            <div class=\"debug-box\">\n",
    "                <strong>‚ö†Ô∏è Department Tab Debug:</strong><br>\n",
    "                ‚Ä¢ Filtered data shape: {}<br>\n",
    "                ‚Ä¢ Departments in filtered data: {}<br>\n",
    "                ‚Ä¢ Selected departments: {}\n",
    "            </div>\n",
    "            \"\"\".format(\n",
    "                df_f.shape,\n",
    "                list(df_f[\"Department\"].unique()) if not df_f.empty else \"None\",\n",
    "                dept_sel\n",
    "            ), unsafe_allow_html=True)\n",
    "            st.warning(\"No department data to display. Check your filters!\")\n",
    "        else:\n",
    "            if chart_type == \"Stacked Bars\":\n",
    "                by_dept_melt = by_dept.melt(\"Department\", var_name=\"Type\", value_name=\"Amount\")\n",
    "                dept_chart = (\n",
    "                    alt.Chart(by_dept_melt)\n",
    "                    .mark_bar(cornerRadius=4)\n",
    "                    .encode(\n",
    "                        x=alt.X(\"Department:N\", sort=\"-y\", axis=alt.Axis(labelAngle=-45)),\n",
    "                        y=alt.Y(\"Amount:Q\", axis=alt.Axis(format=\"$,.0f\"), stack=\"zero\"),\n",
    "                        color=alt.Color(\n",
    "                            \"Type:N\",\n",
    "                            scale=alt.Scale(domain=[\"Budget_Allocated\", \"Actual_Spent\"], \n",
    "                                          range=[\"#3b82f6\", \"#ef4444\"]),\n",
    "                            legend=alt.Legend(title=\"Type\", orient=\"top\")\n",
    "                        ),\n",
    "                        tooltip=[\n",
    "                            \"Department\", \n",
    "                            \"Type\", \n",
    "                            alt.Tooltip(\"Amount:Q\", format=\"$,.0f\")\n",
    "                        ],\n",
    "                    )\n",
    "                    .properties(height=400, title=\"Budget vs Actual by Department (Stacked)\")\n",
    "                )\n",
    "                st.altair_chart(dept_chart.interactive(), use_container_width=True)\n",
    "                \n",
    "            elif chart_type == \"Grouped Bars\":\n",
    "                by_dept_melt = by_dept.melt(\"Department\", var_name=\"Type\", value_name=\"Amount\")\n",
    "                dept_chart = (\n",
    "                    alt.Chart(by_dept_melt)\n",
    "                    .mark_bar(cornerRadius=4)\n",
    "                    .encode(\n",
    "                        x=alt.X(\"Department:N\", sort=\"-y\", axis=alt.Axis(labelAngle=-45)),\n",
    "                        y=alt.Y(\"Amount:Q\", axis=alt.Axis(format=\"$,.0f\")),\n",
    "                        color=alt.Color(\n",
    "                            \"Type:N\",\n",
    "                            scale=alt.Scale(domain=[\"Actual_Spent\", \"Budget_Allocated\"], \n",
    "                                          range=[\"#ef4444\", \"#3b82f6\"]),\n",
    "                            legend=alt.Legend(title=\"Type\", orient=\"top\")\n",
    "                        ),\n",
    "                        xOffset=\"Type:N\",\n",
    "                        tooltip=[\n",
    "                            \"Department\", \n",
    "                            \"Type\", \n",
    "                            alt.Tooltip(\"Amount:Q\", format=\"$,.0f\")\n",
    "                        ],\n",
    "                    )\n",
    "                    .properties(height=400, title=\"Budget vs Actual by Department (Grouped)\")\n",
    "                )\n",
    "                st.altair_chart(dept_chart.interactive(), use_container_width=True)\n",
    "                \n",
    "            else:  # Pie Charts\n",
    "                col1, col2 = st.columns(2)\n",
    "                \n",
    "                with col1:\n",
    "                    budget_pie = (\n",
    "                        alt.Chart(by_dept)\n",
    "                        .mark_arc(innerRadius=50, outerRadius=120)\n",
    "                        .encode(\n",
    "                            theta=alt.Theta(\"Budget_Allocated:Q\"),\n",
    "                            color=alt.Color(\"Department:N\", \n",
    "                                          scale=alt.Scale(scheme=\"category20\"),\n",
    "                                          legend=alt.Legend(title=\"Department\", orient=\"right\")),\n",
    "                            tooltip=[\n",
    "                                \"Department\", \n",
    "                                alt.Tooltip(\"Budget_Allocated:Q\", format=\"$,.0f\", title=\"Budget\")\n",
    "                            ]\n",
    "                        )\n",
    "                        .properties(height=350, title=\"Budget Allocation by Department\")\n",
    "                    )\n",
    "                    st.altair_chart(budget_pie, use_container_width=True)\n",
    "                \n",
    "                with col2:\n",
    "                    actual_pie = (\n",
    "                        alt.Chart(by_dept)\n",
    "                        .mark_arc(innerRadius=50, outerRadius=120)\n",
    "                        .encode(\n",
    "                            theta=alt.Theta(\"Actual_Spent:Q\"),\n",
    "                            color=alt.Color(\"Department:N\", \n",
    "                                          scale=alt.Scale(scheme=\"category20\"),\n",
    "                                          legend=alt.Legend(title=\"Department\", orient=\"right\")),\n",
    "                            tooltip=[\n",
    "                                \"Department\", \n",
    "                                alt.Tooltip(\"Actual_Spent:Q\", format=\"$,.0f\", title=\"Actual\")\n",
    "                            ]\n",
    "                        )\n",
    "                        .properties(height=350, title=\"Actual Spending by Department\")\n",
    "                    )\n",
    "                    st.altair_chart(actual_pie, use_container_width=True)\n",
    "\n",
    "    with tab3:\n",
    "        # Debug info and enhanced category tab\n",
    "        by_cat = df_f.groupby(\"Category\", as_index=False)[[\"Actual_Spent\", \"Budget_Allocated\"]].sum()\n",
    "        \n",
    "        # Debug information\n",
    "        if by_cat.empty:\n",
    "            st.markdown(\"\"\"\n",
    "            <div class=\"debug-box\">\n",
    "                <strong>‚ö†Ô∏è Category Tab Debug:</strong><br>\n",
    "                ‚Ä¢ Filtered data shape: {}<br>\n",
    "                ‚Ä¢ Categories in filtered data: {}<br>\n",
    "                ‚Ä¢ Selected categories: {}<br>\n",
    "                ‚Ä¢ Total unique categories in dataset: {}\n",
    "            </div>\n",
    "            \"\"\".format(\n",
    "                df_f.shape,\n",
    "                list(df_f[\"Category\"].unique()) if not df_f.empty else \"None\",\n",
    "                cat_sel,\n",
    "                len(df[\"Category\"].unique())\n",
    "            ), unsafe_allow_html=True)\n",
    "            st.warning(\"No category data to display. Check your filters!\")\n",
    "        else:\n",
    "            # Show data preview\n",
    "            with st.expander(\"üîç Category Data Preview\"):\n",
    "                st.dataframe(by_cat, use_container_width=True)\n",
    "            \n",
    "            if chart_type == \"Stacked Bars\":\n",
    "                by_cat_melt = by_cat.melt(\"Category\", var_name=\"Type\", value_name=\"Amount\")\n",
    "                cat_chart = (\n",
    "                    alt.Chart(by_cat_melt)\n",
    "                    .mark_bar(cornerRadius=4)\n",
    "                    .encode(\n",
    "                        x=alt.X(\"Category:N\", sort=\"-y\", axis=alt.Axis(labelAngle=-45)),\n",
    "                        y=alt.Y(\"Amount:Q\", axis=alt.Axis(format=\"$,.0f\"), stack=\"zero\"),\n",
    "                        color=alt.Color(\n",
    "                            \"Type:N\",\n",
    "                            scale=alt.Scale(domain=[\"Budget_Allocated\", \"Actual_Spent\"], \n",
    "                                          range=[\"#3b82f6\", \"#ef4444\"]),\n",
    "                            legend=alt.Legend(title=\"Type\", orient=\"top\")\n",
    "                        ),\n",
    "                        tooltip=[\n",
    "                            \"Category\", \n",
    "                            \"Type\", \n",
    "                            alt.Tooltip(\"Amount:Q\", format=\"$,.0f\")\n",
    "                        ],\n",
    "                    )\n",
    "                    .properties(height=400, title=\"Budget vs Actual by Category (Stacked)\")\n",
    "                )\n",
    "                st.altair_chart(cat_chart.interactive(), use_container_width=True)\n",
    "                \n",
    "            elif chart_type == \"Grouped Bars\":\n",
    "                by_cat_melt = by_cat.melt(\"Category\", var_name=\"Type\", value_name=\"Amount\")\n",
    "                cat_chart = (\n",
    "                    alt.Chart(by_cat_melt)\n",
    "                    .mark_bar(cornerRadius=4)\n",
    "                    .encode(\n",
    "                        x=alt.X(\"Category:N\", sort=\"-y\", axis=alt.Axis(labelAngle=-45)),\n",
    "                        y=alt.Y(\"Amount:Q\", axis=alt.Axis(format=\"$,.0f\")),\n",
    "                        color=alt.Color(\n",
    "                            \"Type:N\",\n",
    "                            scale=alt.Scale(domain=[\"Actual_Spent\", \"Budget_Allocated\"], \n",
    "                                          range=[\"#ef4444\", \"#3b82f6\"]),\n",
    "                            legend=alt.Legend(title=\"Type\", orient=\"top\")\n",
    "                        ),\n",
    "                        xOffset=\"Type:N\",\n",
    "                        tooltip=[\n",
    "                            \"Category\", \n",
    "                            \"Type\", \n",
    "                            alt.Tooltip(\"Amount:Q\", format=\"$,.0f\")\n",
    "                        ],\n",
    "                    )\n",
    "                    .properties(height=400, title=\"Budget vs Actual by Category (Grouped)\")\n",
    "                )\n",
    "                st.altair_chart(cat_chart.interactive(), use_container_width=True)\n",
    "                \n",
    "            else:  # Pie Charts\n",
    "                col1, col2 = st.columns(2)\n",
    "                \n",
    "                with col1:\n",
    "                    budget_pie = (\n",
    "                        alt.Chart(by_cat)\n",
    "                        .mark_arc(innerRadius=50, outerRadius=120)\n",
    "                        .encode(\n",
    "                            theta=alt.Theta(\"Budget_Allocated:Q\"),\n",
    "                            color=alt.Color(\"Category:N\", \n",
    "                                          scale=alt.Scale(scheme=\"set3\"),\n",
    "                                          legend=alt.Legend(title=\"Category\", orient=\"right\")),\n",
    "                            tooltip=[\n",
    "                                \"Category\", \n",
    "                                alt.Tooltip(\"Budget_Allocated:Q\", format=\"$,.0f\", title=\"Budget\")\n",
    "                            ]\n",
    "                        )\n",
    "                        .properties(height=350, title=\"Budget Allocation by Category\")\n",
    "                    )\n",
    "                    st.altair_chart(budget_pie, use_container_width=True)\n",
    "                \n",
    "                with col2:\n",
    "                    actual_pie = (\n",
    "                        alt.Chart(by_cat)\n",
    "                        .mark_arc(innerRadius=50, outerRadius=120)\n",
    "                        .encode(\n",
    "                            theta=alt.Theta(\"Actual_Spent:Q\"),\n",
    "                            color=alt.Color(\"Category:N\", \n",
    "                                          scale=alt.Scale(scheme=\"set3\"),\n",
    "                                          legend=alt.Legend(title=\"Category\", orient=\"right\")),\n",
    "                            tooltip=[\n",
    "                                \"Category\", \n",
    "                                alt.Tooltip(\"Actual_Spent:Q\", format=\"$,.0f\", title=\"Actual\")\n",
    "                            ]\n",
    "                        )\n",
    "                        .properties(height=350, title=\"Actual Spending by Category\")\n",
    "                    )\n",
    "                    st.altair_chart(actual_pie, use_container_width=True)\n",
    "\n",
    "# === Helpers ===\n",
    "def tbl(df_):\n",
    "    return \"(none)\" if df_.empty else df_.to_string(index=False)\n",
    "\n",
    "def parse_month_year(text: str):\n",
    "    # Accept \"June 2025\", \"Jun 2025\", \"2025-06\", \"06/2025\"\n",
    "    month_map = {m.lower(): i for i, m in enumerate(\n",
    "        [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"], 1)}\n",
    "    m1 = re.search(r'\\b([A-Za-z]{3,9})\\s+(\\d{4})\\b', text)\n",
    "    if m1:\n",
    "        mname = m1.group(1).lower()\n",
    "        yr = int(m1.group(2))\n",
    "        mon = month_map.get(mname)\n",
    "        if mon is None:\n",
    "            for full, idx in month_map.items():\n",
    "                if full.startswith(mname): mon = idx; break\n",
    "        if mon: return yr, mon\n",
    "    m2 = re.search(r'\\b(20\\d{2})[-/](0?[1-9]|1[0-2])\\b', text)\n",
    "    if m2: return int(m2.group(1)), int(m2.group(2))\n",
    "    m3 = re.search(r'\\b(0?[1-9]|1[0-2])[-/](20\\d{2})\\b', text)\n",
    "    if m3: return int(m3.group(2)), int(m3.group(1))\n",
    "    return None, None\n",
    "\n",
    "def extract_match(text, options):\n",
    "    text_l = text.lower()\n",
    "    for opt in options:\n",
    "        if opt.lower() in text_l:\n",
    "            return opt\n",
    "    return None\n",
    "\n",
    "def build_compact_summary(actuals_df: pd.DataFrame, forecast_df: pd.DataFrame | None):\n",
    "    # ACTUALS (last 24 months + top10 dept/cat)\n",
    "    a_month = actuals_df.groupby(\"Month\", as_index=False)[[\"Actual_Spent\",\"Budget_Allocated\"]].sum()\n",
    "    a_month[\"Month\"] = a_month[\"Month\"].dt.strftime(\"%Y-%m\")\n",
    "    a_month_tail = a_month.tail(24)\n",
    "    a_dept = (\n",
    "        actuals_df.groupby(\"Department\", as_index=False)[[\"Actual_Spent\",\"Budget_Allocated\"]]\n",
    "        .sum().sort_values(\"Actual_Spent\", ascending=False).head(10)\n",
    "    )\n",
    "    a_cat = (\n",
    "        actuals_df.groupby(\"Category\", as_index=False)[[\"Actual_Spent\",\"Budget_Allocated\"]]\n",
    "        .sum().sort_values(\"Actual_Spent\", ascending=False).head(10)\n",
    "    )\n",
    "\n",
    "    # FORECAST (limit rows)\n",
    "    if forecast_df is not None and not forecast_df.empty:\n",
    "        f_month = forecast_df.groupby(\"Month\", as_index=False)[\"Predicted_Spent\"].sum()\n",
    "        f_month[\"Month\"] = f_month[\"Month\"].dt.strftime(\"%Y-%m\")\n",
    "        f_month_head = f_month.head(24)\n",
    "        f_dept = (\n",
    "            forecast_df.groupby(\"Department\", as_index=False)[\"Predicted_Spent\"]\n",
    "            .sum().sort_values(\"Predicted_Spent\", ascending=False).head(10)\n",
    "        )\n",
    "        f_cat = (\n",
    "            forecast_df.groupby(\"Category\", as_index=False)[\"Predicted_Spent\"]\n",
    "            .sum().sort_values(\"Predicted_Spent\", ascending=False).head(10)\n",
    "        )\n",
    "    else:\n",
    "        f_month_head = pd.DataFrame(columns=[\"Month\",\"Predicted_Spent\"])\n",
    "        f_dept = pd.DataFrame(columns=[\"Department\",\"Predicted_Spent\"])\n",
    "        f_cat  = pd.DataFrame(columns=[\"Category\",\"Predicted_Spent\"])\n",
    "\n",
    "    prompt = f\"\"\"\n",
    "Use the following compact summaries to answer the user question succinctly. \n",
    "If the question is about forecasts, rely on FORECAST; if about history/variance, rely on ACTUALS. \n",
    "If insufficient info, say so.\n",
    "\n",
    "ACTUALS ‚Äî monthly (last 24):\n",
    "{tbl(a_month_tail)}\n",
    "\n",
    "ACTUALS ‚Äî top departments:\n",
    "{tbl(a_dept)}\n",
    "\n",
    "ACTUALS ‚Äî top categories:\n",
    "{tbl(a_cat)}\n",
    "\n",
    "FORECAST ‚Äî monthly:\n",
    "{tbl(f_month_head)}\n",
    "\n",
    "FORECAST ‚Äî top departments:\n",
    "{tbl(f_dept)}\n",
    "\n",
    "FORECAST ‚Äî top categories:\n",
    "{tbl(f_cat)}\n",
    "\"\"\"\n",
    "    return prompt\n",
    "\n",
    "# === Enhanced GPT Insights ===\n",
    "st.markdown(\"---\")\n",
    "st.markdown(\"\"\"\n",
    "<div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 1.5rem; border-radius: 12px; color: white; text-align: center;\">\n",
    "    <h2>ü§ñ AI-Powered Insights</h2>\n",
    "    <p>Get intelligent analysis and answers about your budget data</p>\n",
    "</div>\n",
    "\"\"\", unsafe_allow_html=True)\n",
    "\n",
    "cols = st.columns([1, 2])\n",
    "\n",
    "# ---- Summary button (compact forecast+actuals) ----\n",
    "with cols[0]:\n",
    "    st.markdown(\"### üìà Quick Analysis\")\n",
    "    if st.button(\"üîç Generate Smart Summary\", use_container_width=True):\n",
    "        if not client:\n",
    "            st.error(\"‚ùå OpenAI API key not configured\")\n",
    "        else:\n",
    "            compact = build_compact_summary(df_f, f_f if (show_forecast and f_f is not None) else None)\n",
    "            user_prompt = compact + \"\\nPlease summarize key trends and give 2‚Äì3 actionable recommendations.\"\n",
    "            with st.spinner(\"üß† AI analyzing your data...\"):\n",
    "                resp = client.chat.completions.create(\n",
    "                    model=\"gpt-3.5-turbo\",\n",
    "                    messages=[\n",
    "                        {\"role\":\"system\",\"content\":\"You are a budget analyst. Be concise, numeric, and practical.\"},\n",
    "                        {\"role\":\"user\",\"content\":user_prompt},\n",
    "                    ],\n",
    "                    temperature=0.3,\n",
    "                    max_tokens=500\n",
    "                )\n",
    "            st.markdown(\"\"\"\n",
    "            <div style=\"background: linear-gradient(135deg, #10b981, #059669); color: white; padding: 1rem; border-radius: 8px; margin: 1rem 0;\">\n",
    "                <strong>‚úÖ Analysis Complete!</strong>\n",
    "            </div>\n",
    "            \"\"\", unsafe_allow_html=True)\n",
    "            st.markdown(f\"\"\"\n",
    "            <div style=\"background: #f8fafc; padding: 1.5rem; border-radius: 8px; border-left: 4px solid #10b981;\">\n",
    "                {resp.choices[0].message.content}\n",
    "            </div>\n",
    "            \"\"\", unsafe_allow_html=True)\n",
    "\n",
    "# ---- Q&A (smart filtering before GPT) ----\n",
    "with cols[1]:\n",
    "    st.markdown(\"### üí¨ Ask Questions\")\n",
    "    q = st.text_input(\n",
    "        \"üîç Ask about your budget data:\",\n",
    "        placeholder=\"e.g., 'Actual Spent in June 2022 for HR', 'Budget for Marketing 2023-11', 'Forecast for June 2025 IT Software'\",\n",
    "        help=\"Ask specific questions about actuals, budgets, or forecasts\"\n",
    "    )\n",
    "    \n",
    "    if q:\n",
    "        wants_forecast = any(k in q.lower() for k in [\"forecast\", \"predicted\", \"prediction\"])\n",
    "        wants_actual = (\"actual\" in q.lower()) or (\"spent\" in q.lower())\n",
    "        wants_budget = (\"budget\" in q.lower()) and not wants_forecast\n",
    "        wants_variance = \"variance\" in q.lower()\n",
    "\n",
    "        year, month = parse_month_year(q)\n",
    "        dept_in_q = extract_match(q, df[\"Department\"].unique())\n",
    "        cat_in_q = extract_match(q, df[\"Category\"].unique())\n",
    "\n",
    "        # Build a small, relevant slice for the question\n",
    "        def df_slice_actuals():\n",
    "            d = df.copy()\n",
    "            if year and month:\n",
    "                ms = f\"{year}-{month:02d}\"\n",
    "                d[\"Month_str\"] = d[\"Month\"].dt.strftime(\"%Y-%m\")\n",
    "                d = d[d[\"Month_str\"] == ms]\n",
    "            d = d[d[\"Department\"].isin(dept_sel)]\n",
    "            d = d[d[\"Category\"].isin(cat_sel)]\n",
    "            if dept_in_q: d = d[d[\"Department\"] == dept_in_q]\n",
    "            if cat_in_q: d = d[d[\"Category\"] == cat_in_q]\n",
    "            return d\n",
    "\n",
    "        def df_slice_forecast():\n",
    "            if f_f is None: return pd.DataFrame()\n",
    "            d = f_f.copy()\n",
    "            if year and month:\n",
    "                ms = f\"{year}-{month:02d}\"\n",
    "                d[\"Month_str\"] = d[\"Month\"].dt.strftime(\"%Y-%m\")\n",
    "                d = d[d[\"Month_str\"] == ms]\n",
    "            if dept_in_q: d = d[d[\"Department\"] == dept_in_q]\n",
    "            if cat_in_q: d = d[d[\"Category\"] == cat_in_q]\n",
    "            return d\n",
    "\n",
    "        # Decide which table to use primarily\n",
    "        primary = None\n",
    "        if wants_forecast:\n",
    "            primary = \"forecast\"\n",
    "            df_q = df_slice_forecast()\n",
    "        elif wants_actual or wants_budget or wants_variance:\n",
    "            primary = \"actuals\"\n",
    "            df_q = df_slice_actuals()\n",
    "        else:\n",
    "            # undefined intent ‚Üí use summaries only\n",
    "            df_q = pd.DataFrame()\n",
    "\n",
    "        # If nothing found, tell user early\n",
    "        if primary and df_q.empty:\n",
    "            target = \"forecast\" if primary == \"forecast\" else \"actuals\"\n",
    "            detail = []\n",
    "            if year and month: detail.append(f\"month={year}-{month:02d}\")\n",
    "            if dept_in_q: detail.append(f\"dept={dept_in_q}\")\n",
    "            if cat_in_q: detail.append(f\"cat={cat_in_q}\")\n",
    "            detail_text = \", \".join(detail) if detail else \"current filters\"\n",
    "            st.markdown(f\"\"\"\n",
    "            <div style=\"background: linear-gradient(45deg, #f59e0b, #d97706); color: white; padding: 1rem; border-radius: 8px;\">\n",
    "                <strong>‚ö†Ô∏è No Data Found:</strong> No {target} rows found for {detail_text}. Try adjusting filters or rephrasing your question.\n",
    "            </div>\n",
    "            \"\"\", unsafe_allow_html=True)\n",
    "        else:\n",
    "            if not client:\n",
    "                st.error(\"‚ùå OpenAI API key not configured\")\n",
    "            else:\n",
    "                # Build tiny prompt: include only up to N rows to stay well below token limits\n",
    "                MAX_ROWS = 40\n",
    "                if not df_q.empty:\n",
    "                    send_cols = (\n",
    "                        [\"Month\",\"Department\",\"Category\",\"Predicted_Spent\"] if primary==\"forecast\"\n",
    "                        else [\"Month\",\"Department\",\"Category\",\"Budget_Allocated\",\"Actual_Spent\",\"Variance\"]\n",
    "                    )\n",
    "                    slim = df_q[send_cols].copy()\n",
    "                    slim[\"Month\"] = pd.to_datetime(slim[\"Month\"]).dt.strftime(\"%Y-%m\")\n",
    "                    slim = slim.head(MAX_ROWS)\n",
    "                    context_table = slim.to_string(index=False)\n",
    "                else:\n",
    "                    context_table = \"(no direct rows selected; use summaries below)\"\n",
    "\n",
    "                # Also include compact summaries for backup context\n",
    "                compact = build_compact_summary(df_f, f_f if (show_forecast and f_f is not None) else None)\n",
    "\n",
    "                final_prompt = f\"\"\"\n",
    "User question: {q}\n",
    "\n",
    "Primary context ({primary or 'auto'}):\n",
    "{context_table}\n",
    "\n",
    "Additional summaries:\n",
    "{compact}\n",
    "\n",
    "Instructions:\n",
    "- If primary context exists, answer using it first.\n",
    "- If primary is empty or insufficient, use the summaries.\n",
    "- Show numbers and brief calculations if relevant.\n",
    "- Keep answers concise and practical.\n",
    "\"\"\"\n",
    "\n",
    "                with st.spinner(\"ü§î AI thinking...\"):\n",
    "                    resp = client.chat.completions.create(\n",
    "                        model=\"gpt-3.5-turbo\",\n",
    "                        messages=[\n",
    "                            {\"role\":\"system\",\"content\":\"You are a precise financial analyst. Be concise and numeric.\"},\n",
    "                            {\"role\":\"user\",\"content\":final_prompt}\n",
    "                        ],\n",
    "                        temperature=0.2,\n",
    "                        max_tokens=450\n",
    "                    )\n",
    "                \n",
    "                st.markdown(f\"\"\"\n",
    "                <div style=\"background: #f0f9ff; padding: 1.5rem; border-radius: 8px; border-left: 4px solid #3b82f6;\">\n",
    "                    <strong>üí° AI Response:</strong><br><br>\n",
    "                    {resp.choices[0].message.content}\n",
    "                </div>\n",
    "                \"\"\", unsafe_allow_html=True)\n",
    "\n",
    "# Enhanced tip section\n",
    "st.markdown(\"\"\"\n",
    "<div class=\"caption-style\">\n",
    "    <strong>üí° Pro Tips:</strong> \n",
    "    ‚Ä¢ Use sidebar filters to focus your analysis\n",
    "    ‚Ä¢ Charts update automatically based on your selections\n",
    "    ‚Ä¢ Try different chart styles: Stacked Bars, Grouped Bars, or Pie Charts\n",
    "    ‚Ä¢ Q&A sends only relevant data to AI for faster, more accurate responses\n",
    "    ‚Ä¢ Try questions like \"Which department overspent the most?\" or \"Show me Q4 2023 trends\"\n",
    "</div>\n",
    "\"\"\", unsafe_allow_html=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "296be05a-333d-4bdd-8f8a-6ad816cba6e5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
